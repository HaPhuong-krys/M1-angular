{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class LoginService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8080/Projet-REST-V1/users';\n    this.isLoggedIn = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedIn.asObservable();\n    this.currentUser = new BehaviorSubject({\n      id_user: 0,\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: '',\n      role: ''\n    });\n    this.currentUser$ = this.currentUser.asObservable();\n    this.checkLoginStatus().subscribe();\n  }\n  login(email, password) {\n    const body = {\n      email: email,\n      password: password\n    };\n    return this.http.post(`${this.apiUrl}/login`, body).pipe(tap(user => {\n      this.isLoggedIn.next(true);\n      this.currentUser.next(user);\n    }), catchError(err => {\n      if (err.status === 401) {\n        alert('Mauvais email ou mot de passe');\n      }\n      return throwError(err);\n    }));\n  }\n  logout() {\n    this.isLoggedIn.next(false);\n    this.currentUser.next({\n      id_user: 0,\n      firstname: '',\n      lastname: '',\n      email: '',\n      password: '',\n      role: ''\n    });\n    this.router.navigate(['/Connexion']);\n  }\n  checkLoginStatus() {\n    return this.http.get(`${this.apiUrl}/login`).pipe(tap(user => {\n      if (user) {\n        this.isLoggedIn.next(true);\n        this.currentUser.next(user);\n      } else {\n        this.isLoggedIn.next(false);\n        this.currentUser.next({\n          id_user: 0,\n          firstname: '',\n          lastname: '',\n          email: '',\n          password: '',\n          role: ''\n        });\n      }\n    }));\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAa,MAAM;AAC3C,SAASC,GAAG,EAAEC,UAAU,QAAS,gBAAgB;;;;AAejD,OAAM,MAAOC,YAAY;EAUvBC,YAAoBC,IAAgB,EAAUC,MAAe;IAAzC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAR5C,WAAM,GAAG,4CAA4C;IAErD,eAAU,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;IACxD,gBAAW,GAAG,IAAI,CAACO,UAAU,CAACC,YAAY,EAAE;IAErC,gBAAW,GAAG,IAAIR,eAAe,CAAO;MAAES,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE,CAAC;IAC9H,iBAAY,GAAG,IAAI,CAACC,WAAW,CAACP,YAAY,EAAE;IAG5C,IAAI,CAACQ,gBAAgB,EAAE,CAACC,SAAS,EAAE;EACrC;EAEAC,KAAK,CAACN,KAAa,EAAEC,QAAgB;IACnC,MAAMM,IAAI,GAAG;MAAEP,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE;IACjD,OAAO,IAAI,CAACR,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CAACG,IAAI,CAC5DrB,GAAG,CAAEsB,IAAI,IAAI;MACX,IAAI,CAAChB,UAAU,CAACiB,IAAI,CAAC,IAAI,CAAC;MAC1B,IAAI,CAACT,WAAW,CAACS,IAAI,CAACD,IAAI,CAAC;IAC7B,CAAC,CAAC,EACFrB,UAAU,CAAEuB,GAAG,IAAI;MACjB,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtBC,KAAK,CAAC,+BAA+B,CAAC;;MAExC,OAAOC,UAAU,CAACH,GAAG,CAAC;IACxB,CAAC,CAAC,CACH;EACH;EAGAI,MAAM;IACJ,IAAI,CAACtB,UAAU,CAACiB,IAAI,CAAC,KAAK,CAAC;IAC3B,IAAI,CAACT,WAAW,CAACS,IAAI,CAAC;MAAEf,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE,CAAC;IACrG,IAAI,CAACR,MAAM,CAACwB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;EAEAd,gBAAgB;IACd,OAAO,IAAI,CAACX,IAAI,CAAC0B,GAAG,CAAO,GAAG,IAAI,CAACV,MAAM,QAAQ,CAAC,CAACC,IAAI,CACrDrB,GAAG,CAAEsB,IAAI,IAAI;MACX,IAAIA,IAAI,EAAE;QACR,IAAI,CAAChB,UAAU,CAACiB,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAACT,WAAW,CAACS,IAAI,CAACD,IAAI,CAAC;OAC5B,MAAM;QACL,IAAI,CAAChB,UAAU,CAACiB,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,CAACT,WAAW,CAACS,IAAI,CAAC;UAAEf,OAAO,EAAE,CAAC;UAAEC,SAAS,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAE,CAAE,CAAC;;IAEzG,CAAC,CAAC,CACH;EACH;;AAjDWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA6B,SAAZ7B,YAAY;EAAA8B,YAFX;AAAM","names":["BehaviorSubject","tap","catchError","LoginService","constructor","http","router","isLoggedIn","asObservable","id_user","firstname","lastname","email","password","role","currentUser","checkLoginStatus","subscribe","login","body","post","apiUrl","pipe","user","next","err","status","alert","throwError","logout","navigate","get","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\saubi\\ANGULAR PROJECTS\\ASII\\M1-angular\\src\\app\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, thr } from 'rxjs';\nimport { tap, catchError  } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nexport interface User {\n  id_user: number;\n  firstname: string;\n  lastname: string;\n  email: string;\n  password: string;\n  role: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private apiUrl = 'http://localhost:8080/Projet-REST-V1/users';\n  \n  private isLoggedIn = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedIn.asObservable();\n\n  public currentUser = new BehaviorSubject<User>({ id_user: 0, firstname: '', lastname: '', email: '', password: '', role: '' });\n  currentUser$ = this.currentUser.asObservable();\n\n  constructor(private http: HttpClient, private router : Router) { \n    this.checkLoginStatus().subscribe();\n  }\n\n  login(email: string, password: string) {\n    const body = { email: email, password: password };\n    return this.http.post<User>(`${this.apiUrl}/login`, body).pipe(\n      tap((user) => {\n        this.isLoggedIn.next(true);\n        this.currentUser.next(user);\n      }),\n      catchError((err) => {\n        if (err.status === 401) {\n          alert('Mauvais email ou mot de passe');\n        }\n        return throwError(err);\n      })\n    );\n  }\n  \n  \n  logout() {\n    this.isLoggedIn.next(false);\n    this.currentUser.next({ id_user: 0, firstname: '', lastname: '', email: '', password: '', role: '' });\n    this.router.navigate(['/Connexion']);\n  }\n\n  checkLoginStatus() {\n    return this.http.get<User>(`${this.apiUrl}/login`).pipe(\n      tap((user) => {\n        if (user) {\n          this.isLoggedIn.next(true);\n          this.currentUser.next(user);\n        } else {\n          this.isLoggedIn.next(false);\n          this.currentUser.next({ id_user: 0, firstname: '', lastname: '', email: '', password: '', role: '' });\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}